geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Ultraviolet Filter (u)")
# Distribution of u filter
ggplot(data_clean, aes(x = r)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Ultraviolet Filter (u)")
# Normalize features like u, g, r, i, z, and redshift
data_clean <- data_clean %>%
mutate(across(c(u, g, r, i, z, redshift), scale))
# Plot redshift distribution
ggplot(data_clean, aes(x = redshift)) +
geom_histogram(bins = 50, fill = "lightblue", color = "black") +
theme_minimal() +
ggtitle("Redshift Distribution")
# Plot celestial coordinates (alpha vs delta)
ggplot(data_clean, aes(x = alpha, y = delta, color = class)) +
geom_point(alpha = 0.5) +
theme_minimal() +
ggtitle("Celestial Coordinates by Object Class") +
scale_color_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Restructure the data to long format
data_long <- data_clean %>%
pivot_longer(cols = c(u, g, r, i, z), names_to = "filter", values_to = "value")
# Create the individual density plots
ggplot(data_long, aes(x = value, color = filter)) +
geom_density(size = 1) +
facet_wrap(~filter, scales = "free_x") +  # Creates individual plots for each filter
theme_minimal() +
ggtitle("Density Plot of Photometric Filters") +
scale_color_manual(values = c("u" = "blue", "g" = "green", "r" = "red", "i" = "purple", "z" = "orange")) +
labs(color = "Filter")
# Redshift vs Photometric Filters (scatter plot)
# Restructure the data to long format
data_long <- data_clean %>%
pivot_longer(cols = c(u, g, r, i, z), names_to = "filter", values_to = "value")
# Create the individual plots
ggplot(data_long, aes(x = redshift, y = value, color = filter)) +
geom_point(alpha = 0.5) +
facet_wrap(~filter, scales = "free_y") +  # Creates individual plots for each filter
theme_minimal() +
ggtitle("Redshift vs Photometric Measurements") +
scale_color_manual(values = c("u" = "blue", "g" = "green", "r" = "red", "i" = "purple", "z" = "orange")) +
labs(color = "Filter")
# Class vs Redshift (box plot)
ggplot(data_clean, aes(x = class, y = redshift, fill = class)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Redshift Distribution by Object Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Histogram of redshift across object classes
ggplot(data_clean, aes(x = redshift, fill = class)) +
geom_histogram(bins = 30, alpha = 0.7, position = "identity") +
theme_minimal() +
ggtitle("Redshift Distribution by Object Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
colnames(data_clean)
# Calculate correlation between alpha and delta
cor_alpha_delta <- cor(data_clean$alpha, data_clean$delta)
print(cor_alpha_delta)
# Scatter plot with different colors for alpha (points) and delta (regression line)
ggplot(data_clean, aes(x = alpha, y = delta)) +
geom_point(alpha = 0.5, color = "blue") +  # Points for alpha vs delta in blue
geom_smooth(method = "lm", aes(color = "Delta Regression Line"), linetype = "solid", size = 1.2) +  # Regression line in red
scale_color_manual(values = c("Delta Regression Line" = "red")) +  # Set color for the regression line
theme_minimal() +
ggtitle("Alpha vs Delta with Separate Colors for Points and Regression Line") +
labs(color = "Legend")  # Legend to label the regression line
# Boxplot for Red filter (r) by class
ggplot(data_clean, aes(x = class, y = r, fill = class)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Red Filter (r) Distribution by Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Boxplot for Near Infrared filter (i) by class
ggplot(data_clean, aes(x = class, y = i, fill = class)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Near Infrared Filter (i) Distribution by Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Violin plot for Ultraviolet filter (u) by class
ggplot(data_clean, aes(x = class, y = i, fill = class)) +
geom_violin(trim = FALSE) +
theme_minimal() +
ggtitle("Ultraviolet Filter (u) Distribution by Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Violin plot for Ultraviolet filter (u) by class
ggplot(data_clean, aes(x = class, y = r, fill = class)) +
geom_violin(trim = FALSE) +
theme_minimal() +
ggtitle("Ultraviolet Filter (u) Distribution by Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Density plot for Ultraviolet filter (u) by class
ggplot(data_clean, aes(x = i, fill = class)) +
geom_density(alpha = 0.5) +
theme_minimal() +
ggtitle("Ultraviolet Filter (u) Density by Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Density plot for Ultraviolet filter (u) by class
ggplot(data_clean, aes(x = r, fill = class)) +
geom_density(alpha = 0.5) +
theme_minimal() +
ggtitle("Ultraviolet Filter (u) Density by Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Contour plot for alpha, delta, and u filter
p <- ggplot(data_clean, aes(x = alpha, y = delta, z = u)) +
geom_density_2d() +
theme_minimal() +
ggtitle("Contour Plot of Alpha vs Delta with Ultraviolet Filter (u)")
p
# Line plot showing trends in redshift over alpha
ggplot(data_clean, aes(x = alpha, y = redshift)) +
geom_line() +
labs(title = "Line Plot: Redshift over Alpha", x = "Alpha", y = "Redshift") +
theme_minimal()
# Facet grid for comparing u filter across classes
ggplot(data_clean, aes(x = u)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
facet_wrap(~ class, scales = "free") +
labs(title = "Histogram of u Filter by Class", x = "u", y = "Count") +
theme_minimal()
# 3D Scatter plot for alpha, delta, and redshift
plot_ly(data_clean, x = ~alpha, y = ~delta, z = ~redshift, color = ~class, colors = c('blue', 'green', 'red')) %>%
add_markers() %>%
layout(title = "3D Scatter Plot: Alpha vs Delta vs Redshift",
scene = list(xaxis = list(title = 'Alpha'),
yaxis = list(title = 'Delta'),
zaxis = list(title = 'Redshift')))
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(readr)
library(reshape2)
library(ggExtra)
library(fmsb)
library(plotly)
data <- read.csv("C:/Users/Hp/Desktop/Intersteller/Intersteller.csv")
data
# Check for missing values
missing_values <- sapply(data, function(x) sum(is.na(x)))
print(missing_values)
# Remove duplicate rows based on 'obj_ID'
data_clean <- data %>% distinct(obj_ID, .keep_all = TRUE)
table(data_clean$class)
# Class distribution
table(data_clean$class)
# Visualize class distribution
ggplot(data_clean, aes(x = class)) +
geom_bar(fill = "skyblue") +
theme_minimal() +
ggtitle("Distribution of Object Classes")
# Distribution of alpha
ggplot(data_clean, aes(x = alpha)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Alpha (Right Ascension)")
# Distribution of delta
ggplot(data_clean, aes(x = delta)) +
geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
theme_minimal() +
ggtitle("Distribution of Delta (Declination)")
# Distribution of u filter
ggplot(data_clean, aes(x = u)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Ultraviolet Filter (u)")
# Distribution of u filter
ggplot(data_clean, aes(x = r)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Ultraviolet Filter (u)")
# Normalize features like u, g, r, i, z, and redshift
data_clean <- data_clean %>%
mutate(across(c(u, g, r, i, z, redshift), scale))
# Plot redshift distribution
ggplot(data_clean, aes(x = redshift)) +
geom_histogram(bins = 50, fill = "lightblue", color = "black") +
theme_minimal() +
ggtitle("Redshift Distribution")
# Plot celestial coordinates (alpha vs delta)
ggplot(data_clean, aes(x = alpha, y = delta, color = class)) +
geom_point(alpha = 0.5) +
theme_minimal() +
ggtitle("Celestial Coordinates by Object Class") +
scale_color_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Restructure the data to long format
data_long <- data_clean %>%
pivot_longer(cols = c(u, g, r, i, z), names_to = "filter", values_to = "value")
# Create the individual density plots
ggplot(data_long, aes(x = value, color = filter)) +
geom_density(size = 1) +
facet_wrap(~filter, scales = "free_x") +  # Creates individual plots for each filter
theme_minimal() +
ggtitle("Density Plot of Photometric Filters") +
scale_color_manual(values = c("u" = "blue", "g" = "green", "r" = "red", "i" = "purple", "z" = "orange")) +
labs(color = "Filter")
# Redshift vs Photometric Filters (scatter plot)
# Restructure the data to long format
data_long <- data_clean %>%
pivot_longer(cols = c(u, g, r, i, z), names_to = "filter", values_to = "value")
# Create the individual plots
ggplot(data_long, aes(x = redshift, y = value, color = filter)) +
geom_point(alpha = 0.5) +
facet_wrap(~filter, scales = "free_y") +  # Creates individual plots for each filter
theme_minimal() +
ggtitle("Redshift vs Photometric Measurements") +
scale_color_manual(values = c("u" = "blue", "g" = "green", "r" = "red", "i" = "purple", "z" = "orange")) +
labs(color = "Filter")
# Class vs Redshift (box plot)
ggplot(data_clean, aes(x = class, y = redshift, fill = class)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Redshift Distribution by Object Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Histogram of redshift across object classes
ggplot(data_clean, aes(x = redshift, fill = class)) +
geom_histogram(bins = 30, alpha = 0.7, position = "identity") +
theme_minimal() +
ggtitle("Redshift Distribution by Object Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
colnames(data_clean)
# Calculate correlation between alpha and delta
cor_alpha_delta <- cor(data_clean$alpha, data_clean$delta)
print(cor_alpha_delta)
# Scatter plot with different colors for alpha (points) and delta (regression line)
ggplot(data_clean, aes(x = alpha, y = delta)) +
geom_point(alpha = 0.5, color = "blue") +  # Points for alpha vs delta in blue
geom_smooth(method = "lm", aes(color = "Delta Regression Line"), linetype = "solid", size = 1.2) +  # Regression line in red
scale_color_manual(values = c("Delta Regression Line" = "red")) +  # Set color for the regression line
theme_minimal() +
ggtitle("Alpha vs Delta with Separate Colors for Points and Regression Line") +
labs(color = "Legend")  # Legend to label the regression line
# Boxplot for Red filter (r) by class
ggplot(data_clean, aes(x = class, y = r, fill = class)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Red Filter (r) Distribution by Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Boxplot for Near Infrared filter (i) by class
ggplot(data_clean, aes(x = class, y = i, fill = class)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Near Infrared Filter (i) Distribution by Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Violin plot for Ultraviolet filter (u) by class
ggplot(data_clean, aes(x = class, y = i, fill = class)) +
geom_violin(trim = FALSE) +
theme_minimal() +
ggtitle("Ultraviolet Filter (u) Distribution by Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Violin plot for Ultraviolet filter (u) by class
ggplot(data_clean, aes(x = class, y = r, fill = class)) +
geom_violin(trim = FALSE) +
theme_minimal() +
ggtitle("Ultraviolet Filter (u) Distribution by Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Density plot for Ultraviolet filter (u) by class
ggplot(data_clean, aes(x = i, fill = class)) +
geom_density(alpha = 0.5) +
theme_minimal() +
ggtitle("Ultraviolet Filter (u) Density by Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Density plot for Ultraviolet filter (u) by class
ggplot(data_clean, aes(x = r, fill = class)) +
geom_density(alpha = 0.5) +
theme_minimal() +
ggtitle("Ultraviolet Filter (u) Density by Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Contour plot for alpha, delta, and u filter
p <- ggplot(data_clean, aes(x = alpha, y = delta, z = u)) +
geom_density_2d() +
theme_minimal() +
ggtitle("Contour Plot of Alpha vs Delta with Ultraviolet Filter (u)")
p
# Line plot showing trends in redshift over alpha
ggplot(data_clean, aes(x = alpha, y = redshift)) +
geom_line() +
labs(title = "Line Plot: Redshift over Alpha", x = "Alpha", y = "Redshift") +
theme_minimal()
# Facet grid for comparing u filter across classes
ggplot(data_clean, aes(x = u)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
facet_wrap(~ class, scales = "free") +
labs(title = "Histogram of u Filter by Class", x = "u", y = "Count") +
theme_minimal()
# 3D Scatter plot for alpha, delta, and redshift
plot_ly(data_clean, x = ~alpha, y = ~delta, z = ~redshift, color = ~class, colors = c('blue', 'green', 'red')) %>%
add_markers() %>%
layout(title = "3D Scatter Plot: Alpha vs Delta vs Redshift",
scene = list(xaxis = list(title = 'Alpha'),
yaxis = list(title = 'Delta'),
zaxis = list(title = 'Redshift')))
# Facet grid for comparing u filter across classes
ggplot(data_clean, aes(x = i)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
facet_wrap(~ class, scales = "free") +
labs(title = "Histogram of u Filter by Class", x = "i", y = "Count") +
theme_minimal()
# Facet grid for comparing u filter across classes
ggplot(data_clean, aes(x = g)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
facet_wrap(~ class, scales = "free") +
labs(title = "Histogram of u Filter by Class", x = "g", y = "Count") +
theme_minimal()
# Facet grid for comparing u filter across classes
ggplot(data_clean, aes(x = z)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
facet_wrap(~ class, scales = "free") +
labs(title = "Histogram of u Filter by Class", x = "z", y = "Count") +
theme_minimal()
# CDF for Redshift
ggplot(data_clean, aes(x = redshift)) +
stat_ecdf(geom = "step", color = "blue") +
theme_minimal() +
ggtitle("Cumulative Distribution Function (CDF) for Redshift")
# Radial plot for celestial coordinates
ggplot(data_clean, aes(x = alpha, y = delta, color = class)) +
geom_point(alpha = 0.5) +
coord_polar() +
theme_minimal() +
ggtitle("Radial Plot of Celestial Coordinates") +
scale_color_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Select only numeric columns
numeric_data <- data_clean %>% select(alpha, delta, u, g, r, i, z, redshift)
# Calculate correlation matrix
correlation_matrix <- cor(numeric_data)
# Melt the correlation matrix for visualization
correlation_melted <- melt(correlation_matrix)
# Plot heatmap using ggplot2
ggplot(correlation_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Correlation") +
theme_minimal() +
labs(title = "Correlation Heatmap") +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))
# Spline plot for redshift over alpha
ggplot(data_clean, aes(x = alpha, y = redshift)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs")) +
theme_minimal() +
ggtitle("Spline Plot: Smoothed Redshift Trends Over Alpha")
# Stacked bar plot for object class distribution by filters
data_long %>%
ggplot(aes(x = filter, fill = class)) +
geom_bar(position = "stack") +
theme_minimal() +
ggtitle("Stacked Bar Plot of Object Class by Photometric Filters") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Time-series plot of redshift over MJD
ggplot(data_clean, aes(x = MJD, y = redshift)) +
geom_line(color = "blue") +
theme_minimal() +
ggtitle("Time-Series Plot: Redshift Over MJD")
# Count of observations by filter and class
ggplot(data_long, aes(x = filter, fill = class)) +
geom_bar(position = "dodge") +
theme_minimal() +
ggtitle("Count of Observations by Filter and Class") +
scale_fill_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Time series of redshift over time (MJD)
ggplot(data_clean, aes(x = MJD, y = redshift, color = class)) +
geom_line() +
theme_minimal() +
ggtitle("Time-Series of Redshift Over MJD by Class") +
scale_color_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Scatter plot with marginal histograms for alpha vs delta
p <- ggplot(data_clean, aes(x = alpha, y = delta, color = class)) +
geom_point(alpha = 0.5) +
theme_minimal() +
ggtitle("Alpha vs Delta with Marginal Distributions")
ggMarginal(p, type = "histogram", fill = "skyblue")
# Prepare data for radar plot
data_radar <- data_clean %>%
group_by(class) %>%
summarise(across(c(u, g, r, i, z), mean))
# Add max and min rows for scaling
data_radar <- rbind(rep(1,5), rep(0,5), data_radar[,-1])
# Create radar chart
radarchart(data_radar, axistype = 1,
pcol = c("blue", "green", "red"),
plwd = 2, plty = 1,
title = "Radar Chart: Average Filter Values by Object Class")
# Hexbin plot for alpha vs delta
ggplot(data_clean, aes(x = alpha, y = delta)) +
geom_hex(bins = 30) +
theme_minimal() +
scale_fill_viridis_c() +
ggtitle("Hexbin Plot: Density of Alpha and Delta")
knit_with_parameters("C:/Users/Hp/Desktop/Intersteller/pramod.Rmd")
knit_with_parameters("C:/Users/Hp/Desktop/Intersteller/pramod.Rmd")
knit_with_parameters("C:/Users/Hp/Desktop/Intersteller/pramod.Rmd")
data <- read.csv("C:/Users/Hp/Desktop/Intersteller/Intersteller.csv")
head(data)
data <- read.csv("C:/Users/Hp/Desktop/Intersteller/Intersteller.csv")
head(data)
summary(data)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(readr)
library(reshape2)
library(ggExtra)
library(fmsb)
library(plotly)
data <- read.csv("C:/Users/Hp/Desktop/Intersteller/Intersteller.csv")
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(readr)
library(reshape2)
library(ggExtra)
library(fmsb)
library(plotly)
data <- read.csv(""C:/Users/Hp/Desktop/Intersteller/Intersteller/Intersteller.csv"")
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(readr)
library(reshape2)
library(ggExtra)
library(fmsb)
library(plotly)
data <- read.csv("C:/Users/Hp/Desktop/Intersteller/Intersteller/Intersteller.csv")
head(data)
summary(data)
# Check for missing values
missing_values <- sapply(data, function(x) sum(is.na(x)))
print(missing_values)
# Remove duplicate rows based on 'obj_ID'
data_clean <- data %>% distinct(obj_ID, .keep_all = TRUE)
data_clean
# Remove the 'obj_ID' and 'spec_obj_ID' columns
data <- data[, !(names(data) %in% c('obj_ID', 'spec_obj_ID'))]
data
table(data_clean$class)
# Class distribution
table(data_clean$class)
# Visualize class distribution
ggplot(data_clean, aes(x = class)) +
geom_bar(fill = "skyblue") +
theme_minimal() +
ggtitle("Distribution of Object Classes")
# Distribution of alpha
ggplot(data_clean, aes(x = alpha)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Alpha (Right Ascension)")
# Distribution of delta
ggplot(data_clean, aes(x = delta)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Delta (Declination)")
# Distribution of u filter
ggplot(data_clean, aes(x = u)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Ultraviolet Filter (u)")
# Distribution of u filter
ggplot(data_clean, aes(x = r)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Ultraviolet Filter (u)")
# Normalize features like u, g, r, i, z, and redshift
data_clean <- data_clean %>%
mutate(across(c(u, g, r, i, z, redshift), scale))
data_clean
# Plot redshift distribution
ggplot(data_clean, aes(x = redshift)) +
geom_histogram(bins = 50, fill = "skyblue", color = "black") +
theme_minimal() +
ggtitle("Redshift Distribution")
# Plot celestial coordinates (alpha vs delta)
ggplot(data_clean, aes(x = alpha, y = delta, color = class)) +
geom_point(alpha = 0.5) +
theme_minimal() +
ggtitle("Celestial Coordinates by Object Class") +
scale_color_manual(values = c("GALAXY" = "blue", "STAR" = "green", "QUASAR" = "red"))
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp('IN')
runApp('IN')
runApp('IN')
install.packages("DT")
shiny::runApp('C:/Users/Hp/Desktop/Intersteller/Intersteller/IN')
install.packages("DT")
shiny::runApp()
install.packages("DT")
install.packages("DT")
install.packages("DT")
runApp()
install.packages("DT")
runApp()
install.packages("DT")
install.packages("DT")
runApp()
install.packages("DT")
runApp()
install.packages("DT")
runApp()
install.packages("DT")
shiny::runApp('C:/Users/Hp/Desktop/Intersteller/Intersteller/IN')
runApp()
install.packages("DT")
shiny::runApp()
install.packages("DT")
